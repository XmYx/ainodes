!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("BaklavaJSInterfaceTypes",[],e):"object"==typeof exports?exports.BaklavaJSInterfaceTypes=e():t.BaklavaJSInterfaceTypes=e()}("undefined"!=typeof self?self:this,(function(){return(()=>{"use strict";var t={d:(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{InterfaceTypePlugin:()=>n});var n=function(){function t(){this.type="InterfaceTypePlugin",this.types=new Map}return t.prototype.register=function(t){var e=this;this.editor=t,this.editor.plugins.forEach((function(t){"ViewPlugin"===t.type&&e.registerView(t)})),this.editor.events.checkConnection.addListener(this,(function(t){var n=t.from,o=t.to,r=n.type,i=o.type;if(r&&i)return!!e.canConvert(r,i)&&void 0})),this.editor.events.usePlugin.addListener(this,(function(t){"ViewPlugin"===t.type&&e.registerView(t)}))},t.prototype.addType=function(t,e){return this.types.set(t,{color:e,conversions:[]}),this},t.prototype.addConversion=function(t,e,n){if(!this.types.has(t))throw new Error('Can not add conversion for unknown type "'.concat(t,'"'));return n||(n=function(t){return t}),this.types.get(t).conversions.push({targetType:e,transformationFunction:n}),this},t.prototype.getConversion=function(t,e){return this.types.has(t)&&this.types.get(t).conversions.find((function(t){return t.targetType===e}))},t.prototype.canConvert=function(t,e){return t===e||this.types.has(t)&&this.types.get(t).conversions.some((function(t){return t.targetType===e}))},t.prototype.convert=function(t,e,n){if(t===e)return n;var o=this.getConversion(t,e);if(o)return o.transformationFunction(n);throw Error('Can not convert from "'.concat(t,'" to "').concat(e,'"'))},t.prototype.registerView=function(t){var e=this;t.hooks.renderInterface.tap(this,(function(t){var n=t.intf||t.data;if(!n)throw new Error("Could not get interface data");if(e.types.has(n.type)){var o=e.types.get(n.type).color,r=t.$el.getElementsByClassName("__port");Array.from(r).forEach((function(t){t.classList.add("__port-"+n.type),t.style.backgroundColor=o,t.title=n.type}))}return t}))},t}();return e})()}));